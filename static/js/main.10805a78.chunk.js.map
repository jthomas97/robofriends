{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js","robots.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","robots","map","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","React","ReactDOM","render","username","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10805a78.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n// index.js passes robots array aka 'props' to App.js\r\n// which passes robots to CardList.js\r\n// CardList.js passes individual robots to Card\r\n\r\n// Card function accepts them as paramaters and destructures them\r\n// since they are passed as a object\r\n\r\n// So you dont have to do props.name props.email etc...\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n    <div className=' tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?200x200`} alt='robot' / >\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react'; \r\nimport Card from './Card';\r\n\r\n\r\n// Destructures 'props' object which leaves us with robots array\r\nconst CardList = ({robots}) => {\r\n  // if(true){\r\n  //   throw new Error('Nooo');\r\n  // }\r\n  return (\r\n    <div>\r\n      {\r\n      // Maps over every item in array, each indiviual item is an object\r\n      // which can be accessed as robot.\r\n\r\n      // Cant use forEach since it changes original value\r\n      // we need to return aka make multiple Cards\r\n\r\n      // Here we destructure again so we dont have to say \r\n      // key = {robot.id}\r\n        robots.map(({name, email, id}, index) => {\r\n          return (\r\n            <Card \r\n              key={index} \r\n              id={id} \r\n              name={name} \r\n              email={email} \r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n// searchChange is a function that is passed to component SearchBox\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n        type='search' \r\n        placeholder='search robots' \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n      // Basic HTML, when input field is changed, call function searchChange\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({hasError: true})\r\n  }\r\n\r\n  render(){\r\n      if(this.state.hasError){\r\n        return <h1>Oops. That is not good</h1>\r\n      }\r\n      return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport './App.css';\r\n\r\n\r\n\r\n// Each state component must have a render function that returns something\r\n\r\n// To add state, must have a constructor\r\n\r\n// To use the keyword 'this' you must call super.\r\n// Which basically calls the constructor of the Component obj\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super()\r\n  // Set initail state robots as the imported robots array,\r\n  // Set initial state for searchfield as empty str\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users').then((response) => {\r\n      return response.json();\r\n    }).then((users) => {\r\n      this.setState({robots: users});\r\n    })\r\n  }\r\n\r\n//When input from SearchBox component is changed,\r\n// Call this function.\r\n// Which updates state field as the target.value from event\r\n\r\n//onSearchChange needs to be arrow function, since this.state refers to this object,\r\n//Without arrow function, this.state would be trying to get it from input\r\n\r\n// Rule of thumb: when you make your own methods on components, make them arrow funcs\r\n  onSearchChange = (event) => {\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n\r\n// We are able to update the robots since when state changes render function is re-ran\r\n  render(){\r\n  // Take this.state.robots array and filter, only the names in the searchbox\r\n    const filteredRobots = this.state.robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    return (\r\n      <div className='tc'>\r\n        <h1 className='f2'>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n    {/* Initially filteredRobots is an array of all the robots since\r\n    it initally compare if each robot.name includes a string. Which is obv true */}\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots}/>\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\n\n// Destructure, since not exporting default in robots. Could have others in robots.js\n// such as export const cats = []\nimport {robots} from './robots'\n\nReactDOM.render(\n                <App robots={robots}/>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n"],"sourceRoot":""}